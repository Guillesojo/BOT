//@version=5
tickerid = syminfo.tickerid
period = timeframe.period

//@optimize
strategy("Full strategy alert version", overlay=true, initial_capital = 1000, default_qty_type=strategy.percent_of_equity, default_qty_value=170,commission_type=strategy.commission.percent , commission_value=0.52)

//time
fromDay = input.int(defval = 1, title = "From Day", minval = 1, maxval = 31)
fromMonth = input.int(defval = 1, title = "From Month", minval = 1, maxval = 12)
fromYear = input.int(defval = 2023, title = "From Year", minval = 1970)
toDay = input.int(defval = 31, title = "To Day", minval = 1, maxval = 31)
toMonth = input.int(defval = 12, title = "To Month", minval = 1, maxval = 12)
toYear = input.int(defval = 2023, title = "To Year", minval = 1970)


len = input.int(25, minval=1, title="Length")
src = input(close, title="Source")
fast_length = input.int(title="Fast Length", defval=12)
slow_length = input.int(title="Slow Length",  defval=26)
signal_length = input.int(title="Signal Smoothing", minval = 1, maxval = 50, defval = 9)
sma_source = input.bool(title="Simple MA (Oscillator)",  defval=false)
sma_signal = input.bool(title="Simple MA (Signal Line)",  defval=false)
atype = input.int(1,minval=1,maxval=7,title="1=SMA, 2=EMA, 3=WMA, 4=HullMA, 5=VWMA, 6=RMA, 7=TEMA")
smoothe = input.int(2, minval=1, maxval=10, title="Color Smoothing")
doma2 = input(false, title="Optional 2nd Moving Average")
len2 = input(50, title="Moving Average Length - Optional 2nd MA")
atype2 = input.int(7,minval=1,maxval=7,title="1=SMA, 2=EMA, 3=WMA, 4=HullMA, 5=VWMA, 6=RMA, 7=TEMA")
sd = input(false, title="Show Dots on Cross of Both MA's")

// Calculate time condition
startDate = timestamp(fromYear, fromMonth, fromDay, 00, 00)
finishDate = timestamp(toYear, toMonth, toDay, 00, 00)
time_cond = time >= startDate and time <= finishDate


// Calculate moving average and standard deviation
//1rst MA
hullma = ta.wma(2*ta.wma(src, len/2)-ta.wma(src, len), math.round(math.sqrt(len)))
ema1 = ta.ema(src, len)
ema2 = ta.ema(ema1, len)
ema3 = ta.ema(ema2, len)
tema = 3 * (ema1 - ema2) + ema3

avg = atype == 1 ? ta.sma(src,len) : atype == 2 ? ta.ema(src,len) : atype == 3 ? ta.wma(src,len) : atype == 4 ? hullma : atype == 5 ? ta.vwma(src, len) : atype == 6 ? ta.rma(src,len) : tema

//2nd MA
hullma2 =ta.wma(2*ta.wma(src, len2/2)-ta.wma(src, len2), math.round(math.sqrt(len2)))
sema1 = ta.ema(src, len2)
sema2 = ta.ema(sema1, len2)
sema3 = ta.ema(sema2, len2)
stema = 3 * (sema1 - sema2) + sema3

avg2 = atype2 == 1 ? ta.sma(src,len2) : atype2 == 2 ? ta.ema(src,len2) : atype2 == 3 ? ta.wma(src,len2) : atype2 == 4 ? hullma2 : atype2 == 5 ? ta.vwma(src, len2) : atype2 == 6 ? ta.rma(src,len2) : tema

out_2 = avg 
out_3 = avg2

circleYPosition = out_3

stdev = ta.stdev(out_2, 30)
upperBand = out_2 + stdev
lowerBand = out_2 - stdev
buySignal = ta.crossover(close, lowerBand)
sellSignal = ta.crossover(close, upperBand)

plot(upperBand , title="Buy Signal", color=color.green, linewidth=2)
plot(lowerBand , title="Sell Signal",color=color.red, linewidth=2)
plot(out_2 , title="Multi-Timeframe Moving Avg",  linewidth=4, color = color.blue)
// plot(strategy.equity/10, title = "j", linewidth = 2, color = color.blue)

//RSI
length = input(14)
overSold = input(35)
overBought = input(65)
price = close
vrsi = ta.rsi(price, length)


// Calculate MACD
fast_ma = sma_source ? ta.sma(src, fast_length) : ta.ema(src, fast_length)
slow_ma = sma_source ? ta.sma(src, slow_length) : ta.ema(src, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal ? ta.sma(macd, signal_length) : ta.ema(macd, signal_length)
hist = macd - signal

// Calculate volume
// r =   ta.cum(math.sign(ta.change(close)) * volume)
// outvolume = ta.sma(ta.obv,10)


// Main variables to apply conditions
long = hist > 0   and vrsi < overBought  and buySignal
short= hist< 0    and vrsi > overSold and sellSignal
exitLongCondition = vrsi > overBought and sellSignal
exitShortCondition = vrsi < overSold and buySignal

// Declare input parameter for stop loss percentage
stopLossPercent = input.float(title="Stop Loss Percentage", minval=0.0, maxval=100.0, defval=94)
stopLossPercentS = input.float(title="Stop Loss Percentage", minval=100, maxval=200, defval=104)
stopLossLevel = strategy.position_avg_price * (stopLossPercent / 100)
stopLossLevelS = strategy.position_avg_price * (stopLossPercentS/ 100)

//long
if long
    strategy.entry("Long", strategy.long)
if strategy.position_size > 0 
    strategy.exit("limit", "Long",  stop=stopLossLevel) 

if exitLongCondition
    strategy.exit("Exit Long", limit = close )

//shor
if short
    strategy.entry("Short", strategy.short)
if strategy.position_size < 0 
    strategy.exit("limit", "Short",  stop=stopLossLevelS)
if exitShortCondition
    strategy.exit("Exit Short", limit = close)






